# -*- coding: utf-8 -*-
"""splitting_and_start_to_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vP_PBv2hRCxmxSmIECxxuG3HXe50T3SM
"""

import torch.nn as nn
import numpy as np

# need to convert to tensors
np.random.seed(1)

def split_train_val_test(input, labels, man_input, man_lab):

  num_examples = np.arange(len(input))
  np.random.shuffle(num_examples)
  input = input[num_examples]
  labels = labels[num_examples]

  training_proportion = 0.8
  validation_proportion = 0.1
  num_train = int(len(input) * training_proportion)
  num_val = int(len(input) * validation_proportion)
  np.random.shuffle(input)

  input_train, input_valid, input_test = input[:num_train], input[num_train:num_train+num_val], input[num_train+num_val:]
  label_train, label_valid, label_test = labels[:num_train], labels[num_train:num_train+num_val], labels[num_train+num_val:]

  input_test += man_input
  label_test += man_lab

  return input_train, input_valid, input_test, label_train, label_valid, label_test

class model(nn.Module):
  def __init__(self):
    super(model, self).__init__()

    self.convolution_layer = nn.Conv2d(in_channels=1, out_channels=32, stride=1, kernel_size = 3)

  def forward(self, x):
    x = self.convolution_layer(x)
    x = nn.functional.relu(x)
    x = nn.functional.max_pool2d(x)